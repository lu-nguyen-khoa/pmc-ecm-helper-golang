// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/authenticator/authenticator.proto

package authenticator

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserSignInRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserSignInRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSignInRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserSignInRequestMultiError, or nil if none found.
func (m *UserSignInRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSignInRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kind

	if l := len(m.GetUsername()); l < 1 || l > 256 {
		err := UserSignInRequestValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 256 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetPassword()); l < 1 || l > 256 {
		err := UserSignInRequestValidationError{
			field:  "Password",
			reason: "value length must be between 1 and 256 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserSignInRequestMultiError(errors)
	}

	return nil
}

// UserSignInRequestMultiError is an error wrapping multiple validation errors
// returned by UserSignInRequest.ValidateAll() if the designated constraints
// aren't met.
type UserSignInRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSignInRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSignInRequestMultiError) AllErrors() []error { return m }

// UserSignInRequestValidationError is the validation error returned by
// UserSignInRequest.Validate if the designated constraints aren't met.
type UserSignInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSignInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSignInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSignInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSignInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSignInRequestValidationError) ErrorName() string {
	return "UserSignInRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserSignInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSignInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSignInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSignInRequestValidationError{}

// Validate checks the field values on UserSignInData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserSignInData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSignInData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserSignInDataMultiError,
// or nil if none found.
func (m *UserSignInData) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSignInData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokenId

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return UserSignInDataMultiError(errors)
	}

	return nil
}

// UserSignInDataMultiError is an error wrapping multiple validation errors
// returned by UserSignInData.ValidateAll() if the designated constraints
// aren't met.
type UserSignInDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSignInDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSignInDataMultiError) AllErrors() []error { return m }

// UserSignInDataValidationError is the validation error returned by
// UserSignInData.Validate if the designated constraints aren't met.
type UserSignInDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSignInDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSignInDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSignInDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSignInDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSignInDataValidationError) ErrorName() string { return "UserSignInDataValidationError" }

// Error satisfies the builtin error interface
func (e UserSignInDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSignInData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSignInDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSignInDataValidationError{}

// Validate checks the field values on UserSignInReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserSignInReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSignInReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserSignInReplyMultiError, or nil if none found.
func (m *UserSignInReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSignInReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Inner.(type) {
	case *UserSignInReply_Error:
		if v == nil {
			err := UserSignInReplyValidationError{
				field:  "Inner",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserSignInReplyValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserSignInReplyValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserSignInReplyValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UserSignInReply_Data:
		if v == nil {
			err := UserSignInReplyValidationError{
				field:  "Inner",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserSignInReplyValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserSignInReplyValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserSignInReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UserSignInReplyMultiError(errors)
	}

	return nil
}

// UserSignInReplyMultiError is an error wrapping multiple validation errors
// returned by UserSignInReply.ValidateAll() if the designated constraints
// aren't met.
type UserSignInReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSignInReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSignInReplyMultiError) AllErrors() []error { return m }

// UserSignInReplyValidationError is the validation error returned by
// UserSignInReply.Validate if the designated constraints aren't met.
type UserSignInReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSignInReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSignInReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSignInReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSignInReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSignInReplyValidationError) ErrorName() string { return "UserSignInReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserSignInReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSignInReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSignInReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSignInReplyValidationError{}

// Validate checks the field values on ServiceSignInRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceSignInRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceSignInRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceSignInRequestMultiError, or nil if none found.
func (m *ServiceSignInRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceSignInRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetUsername()); l < 1 || l > 256 {
		err := ServiceSignInRequestValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 256 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetPassword()); l < 1 || l > 256 {
		err := ServiceSignInRequestValidationError{
			field:  "Password",
			reason: "value length must be between 1 and 256 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServiceSignInRequestMultiError(errors)
	}

	return nil
}

// ServiceSignInRequestMultiError is an error wrapping multiple validation
// errors returned by ServiceSignInRequest.ValidateAll() if the designated
// constraints aren't met.
type ServiceSignInRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceSignInRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceSignInRequestMultiError) AllErrors() []error { return m }

// ServiceSignInRequestValidationError is the validation error returned by
// ServiceSignInRequest.Validate if the designated constraints aren't met.
type ServiceSignInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceSignInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceSignInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceSignInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceSignInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceSignInRequestValidationError) ErrorName() string {
	return "ServiceSignInRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceSignInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceSignInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceSignInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceSignInRequestValidationError{}

// Validate checks the field values on ServiceSignInData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServiceSignInData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceSignInData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceSignInDataMultiError, or nil if none found.
func (m *ServiceSignInData) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceSignInData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokenId

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return ServiceSignInDataMultiError(errors)
	}

	return nil
}

// ServiceSignInDataMultiError is an error wrapping multiple validation errors
// returned by ServiceSignInData.ValidateAll() if the designated constraints
// aren't met.
type ServiceSignInDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceSignInDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceSignInDataMultiError) AllErrors() []error { return m }

// ServiceSignInDataValidationError is the validation error returned by
// ServiceSignInData.Validate if the designated constraints aren't met.
type ServiceSignInDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceSignInDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceSignInDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceSignInDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceSignInDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceSignInDataValidationError) ErrorName() string {
	return "ServiceSignInDataValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceSignInDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceSignInData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceSignInDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceSignInDataValidationError{}

// Validate checks the field values on ServiceSignInReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceSignInReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceSignInReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceSignInReplyMultiError, or nil if none found.
func (m *ServiceSignInReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceSignInReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Inner.(type) {
	case *ServiceSignInReply_Error:
		if v == nil {
			err := ServiceSignInReplyValidationError{
				field:  "Inner",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceSignInReplyValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceSignInReplyValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceSignInReplyValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServiceSignInReply_Data:
		if v == nil {
			err := ServiceSignInReplyValidationError{
				field:  "Inner",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceSignInReplyValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceSignInReplyValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceSignInReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ServiceSignInReplyMultiError(errors)
	}

	return nil
}

// ServiceSignInReplyMultiError is an error wrapping multiple validation errors
// returned by ServiceSignInReply.ValidateAll() if the designated constraints
// aren't met.
type ServiceSignInReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceSignInReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceSignInReplyMultiError) AllErrors() []error { return m }

// ServiceSignInReplyValidationError is the validation error returned by
// ServiceSignInReply.Validate if the designated constraints aren't met.
type ServiceSignInReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceSignInReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceSignInReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceSignInReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceSignInReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceSignInReplyValidationError) ErrorName() string {
	return "ServiceSignInReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceSignInReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceSignInReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceSignInReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceSignInReplyValidationError{}

// Validate checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenRequestMultiError, or nil if none found.
func (m *RefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetTokenId()) < 1 {
		err := RefreshTokenRequestValidationError{
			field:  "TokenId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRefreshToken()) < 1 {
		err := RefreshTokenRequestValidationError{
			field:  "RefreshToken",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RefreshTokenRequestMultiError(errors)
	}

	return nil
}

// RefreshTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenRequestMultiError) AllErrors() []error { return m }

// RefreshTokenRequestValidationError is the validation error returned by
// RefreshTokenRequest.Validate if the designated constraints aren't met.
type RefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenRequestValidationError) ErrorName() string {
	return "RefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenRequestValidationError{}

// Validate checks the field values on RefreshTokenData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenDataMultiError, or nil if none found.
func (m *RefreshTokenData) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return RefreshTokenDataMultiError(errors)
	}

	return nil
}

// RefreshTokenDataMultiError is an error wrapping multiple validation errors
// returned by RefreshTokenData.ValidateAll() if the designated constraints
// aren't met.
type RefreshTokenDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenDataMultiError) AllErrors() []error { return m }

// RefreshTokenDataValidationError is the validation error returned by
// RefreshTokenData.Validate if the designated constraints aren't met.
type RefreshTokenDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenDataValidationError) ErrorName() string { return "RefreshTokenDataValidationError" }

// Error satisfies the builtin error interface
func (e RefreshTokenDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenDataValidationError{}

// Validate checks the field values on RefreshTokenReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenReplyMultiError, or nil if none found.
func (m *RefreshTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Inner.(type) {
	case *RefreshTokenReply_Error:
		if v == nil {
			err := RefreshTokenReplyValidationError{
				field:  "Inner",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RefreshTokenReplyValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RefreshTokenReplyValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RefreshTokenReplyValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RefreshTokenReply_Data:
		if v == nil {
			err := RefreshTokenReplyValidationError{
				field:  "Inner",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RefreshTokenReplyValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RefreshTokenReplyValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RefreshTokenReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RefreshTokenReplyMultiError(errors)
	}

	return nil
}

// RefreshTokenReplyMultiError is an error wrapping multiple validation errors
// returned by RefreshTokenReply.ValidateAll() if the designated constraints
// aren't met.
type RefreshTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenReplyMultiError) AllErrors() []error { return m }

// RefreshTokenReplyValidationError is the validation error returned by
// RefreshTokenReply.Validate if the designated constraints aren't met.
type RefreshTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenReplyValidationError) ErrorName() string {
	return "RefreshTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenReplyValidationError{}
